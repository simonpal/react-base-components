{"version":3,"file":"TextField.stories.1b3c884e.js","sources":["../../src/components/TextField/TextField.tsx"],"sourcesContent":["import React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { FormControl } from '../FormControl/FormControl'\nimport { Label } from '../FormControl/Label'\n\nconst StyledInput = styled.input`\n  --input-radius: 0;\n  --size-input-default: 3rem;\n  max-width: 100%;\n  flex-grow: 1;\n  transition: all 0.2s ease;\n  color: #000;\n  border-radius: var(--input-radius);\n  border: 1px solid #000;\n  height: var(--size-input-default);\n  padding: 0 var(--spacing-s);\n  &:focus {\n    border-color: blue;\n  }\n\n  &.is-dirty:invalid,\n  &.has-error {\n    border-color: #ff0000;\n    color: #ff0000;\n  }\n\n  &:disabled {\n    opacity: 0.5;\n  }\n`\n\nconst ShowPasswordIcon = () => (\n  <svg\n    stroke=\"currentColor\"\n    fill=\"currentColor\"\n    strokeWidth=\"0\"\n    viewBox=\"0 0 1024 1024\"\n    height=\"1em\"\n    width=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 0 0 0 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\"></path>\n  </svg>\n)\n\nconst HidePasswordIcon = () => (\n  <svg\n    stroke=\"currentColor\"\n    fill=\"currentColor\"\n    strokeWidth=\"0\"\n    viewBox=\"0 0 1024 1024\"\n    height=\"1em\"\n    width=\"1em\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 0 0 0-51.5zm-63.57-320.64L836 122.88a8 8 0 0 0-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 0 0 0 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 0 0 0 11.31L155.17 889a8 8 0 0 0 11.31 0l712.15-712.12a8 8 0 0 0 0-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 0 0-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 0 1 146.2-106.69L401.31 546.2A112 112 0 0 1 396 512z\"></path>\n    <path d=\"M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 0 0 227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 0 1-112 112z\"></path>\n  </svg>\n)\n\ntype InputType =\n  | 'text'\n  | 'number'\n  | 'email'\n  | 'password'\n  | 'date'\n  | 'datetime-local'\n  | 'time'\n  | 'tel'\nexport type TextfieldProps = {\n  label: string\n  hideLabel?: boolean\n  error?: string\n  defaultValue?: any\n  fullWidth?: boolean\n  icon?: JSX.Element\n  iconLeft?: boolean\n  type?: InputType\n  required?: boolean\n  requiredText?: string\n  disabled?: boolean\n  value?: string\n  maxLength?: number\n  name?: string\n  errorBox?: boolean\n  // placeholder?: string;\n}\n\nexport const TextField = forwardRef<\n  HTMLInputElement,\n  TextfieldProps & React.HTMLAttributes<HTMLInputElement>\n>(\n  (\n    {\n      label,\n      hideLabel = false,\n      error = '',\n      fullWidth = false,\n      // multiline = false,\n      id,\n      type = 'text',\n      className,\n      onChange,\n      required = false,\n      requiredText = '*',\n      disabled = false,\n      placeholder = '',\n      value,\n      icon,\n      iconLeft = true,\n      maxLength,\n      defaultValue,\n      errorBox = false,\n      ...rest\n    },\n    ref?: React.Ref<HTMLInputElement>,\n  ) => {\n    // const [inputValue, setInputValue] = useState<any>(value || '');\n    const [showAsText, setShowAsText] = useState<boolean>(false)\n    const [isDirty, setIsDirty] = useState<boolean>(false)\n    const [_type, _setType] = useState<string>(type)\n\n    const inputRef = useRef<HTMLInputElement>(null)\n\n    const iconPosition = useMemo(() => {\n      let pos = iconLeft ? 'left' : 'right'\n      if (type === 'password') {\n        pos = 'right'\n      }\n      return pos\n    }, [type, iconLeft])\n\n    const inputOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (disabled) return\n      // setInputValue(e.target.value);\n      if (onChange) onChange(e)\n    }\n\n    let valueProp = {}\n    if (value) valueProp = { value }\n\n    useEffect(() => {\n      if (type === 'password') {\n        _setType(showAsText ? 'text' : 'password')\n        if (inputRef.current) inputRef.current.focus()\n      }\n    }, [showAsText])\n\n    return (\n      <FormControl\n        fullWidth={fullWidth}\n        className={`${icon || type === 'password' ? `icon-position-${iconPosition}` : ''}`}\n      >\n        {!hideLabel && (\n          <Label htmlFor={id}>\n            {label}\n            {required && <span className=\"required-symbol\">{requiredText}</span>}\n          </Label>\n        )}\n        <StyledInput\n          className={`${error ? 'has-error' : ''} ${isDirty ? 'is-dirty' : ''} ${\n            className ? className : ''\n          }`}\n          ref={ref || inputRef}\n          type={_type}\n          id={id}\n          onChange={inputOnChange}\n          required={required}\n          disabled={disabled}\n          placeholder={placeholder}\n          aria-label={label}\n          maxLength={maxLength}\n          defaultValue={defaultValue}\n          onFocus={() => setIsDirty(true)}\n          {...valueProp}\n          {...rest}\n        />\n        {type === 'password' && (\n          <div className=\"input-icon clickable\" onClick={() => setShowAsText(!showAsText)}>\n            {/* {showAsText ? <VisibilityOff /> : <Visibility />} */}\n            {showAsText ? <HidePasswordIcon /> : <ShowPasswordIcon />}\n          </div>\n        )}\n        {icon && error.length === 0 && type !== 'password' && (\n          <div className={`input-icon`}>{icon}</div>\n        )}\n        {error && error.length > 0 && (\n          <div className={`base-form-input-error ${errorBox ? 'fill' : ''}`}>{error}</div>\n        )}\n      </FormControl>\n    )\n  },\n)\n"],"names":["StyledInput","styled","ShowPasswordIcon","_jsx","HidePasswordIcon","_jsxs","TextField","forwardRef","label","error","fullWidth","id","className","onChange","requiredText","disabled","placeholder","value","icon","maxLength","defaultValue","rest","ref","showAsText","setShowAsText","useState","isDirty","setIsDirty","_type","_setType","type","inputRef","useRef","iconPosition","useMemo","pos","iconLeft","inputOnChange","e","valueProp","useEffect","FormControl","hideLabel","Label","required","errorBox"],"mappings":"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"}