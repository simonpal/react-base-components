{"version":3,"file":"Modal.stories.cf7e0587.js","sources":["../../src/components/icons/TimesIcon.tsx","../../src/components/Overlay/Overlay.tsx","../../src/components/Modal/Modal.tsx"],"sourcesContent":["import { IconWrapper } from './SvgWrapper'\n\nexport const TimesIcon: React.FC<React.HTMLAttributes<SVGElement>> = (props) => (\n  <IconWrapper viewBox=\"0 0 352 512\" {...props}>\n    <path d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\" />\n  </IconWrapper>\n)\n","import React, { useRef } from 'react'\nimport styled, { css } from 'styled-components'\nexport type OverlayProps = {\n  zIndex?: number\n  visible?: boolean\n  transparent?: boolean\n  disableClick?: boolean\n  blur?: boolean\n  onClose?: () => void\n}\n\ntype StyledOverlayProps = {\n  $transparent: boolean\n  $zIndex: number\n  $blur: boolean\n}\n\nconst StyledOverlay = styled.div<StyledOverlayProps>`\n  background-color: rgba(0, 0, 0, 0.25);\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: ${({ $zIndex }) => $zIndex};\n  ${({ $transparent }) =>\n    $transparent &&\n    css`\n      background-color: transparent;\n    `}\n  ${({ $blur }) =>\n    $blur &&\n    css`\n      backdrop-filter: blur(5px);\n    `}\n`\n\nexport const Overlay: React.FunctionComponent<\n  OverlayProps & React.HTMLAttributes<HTMLDivElement>\n> = ({\n  transparent = false,\n  zIndex = 2,\n  visible = false,\n  disableClick = false,\n  blur = false,\n  onClose,\n  className,\n  ...rest\n}) => {\n  const ovRef = useRef<HTMLDivElement>(null)\n\n  const handleClick = (e: any) => {\n    if (!disableClick && ovRef.current && e.target === ovRef.current && onClose) onClose()\n  }\n\n  if (!visible) return null\n\n  const inlineStyle = {\n    ...(zIndex && { ['--overlay-index']: zIndex }),\n  } as any\n\n  return (\n    <StyledOverlay\n      ref={ovRef}\n      className={`base-overlay ${className ? ` ${className}` : ''}`}\n      aria-hidden=\"true\"\n      style={inlineStyle}\n      $transparent={transparent}\n      $zIndex={zIndex}\n      $blur={blur}\n      {...rest}\n      onClick={handleClick}\n    />\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport { AlignItems, Justify } from '../../types'\nimport { TimesIcon } from '../icons/TimesIcon'\n// import Box from '../box/Box';\nimport { Overlay, OverlayProps } from '../Overlay/Overlay'\n// import { getClasses } from '../utils/helpers';\n\ntype StyledModalProps = {\n  $alignItems: AlignItems\n  $justifyContent: Justify\n}\nconst StyledModal = styled.div<StyledModalProps>`\n  max-height: 90%;\n  max-width: 90vw;\n  overflow: visible;\n  width: 50rem;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  button.base-close-button {\n    cursor: pointer;\n    border: 0;\n    z-index: 2;\n    padding: 0;\n    border-radius: 50%;\n    background-color: #fff;\n    box-shadow: 0px 3px 5px 0px rgba(0, 0, 0, 0.23);\n    position: absolute;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    right: -24px;\n    top: -24px;\n    width: 48px;\n    height: 48px;\n    font-size: 1.5rem;\n    svg {\n      margin: 0;\n    }\n\n    @media screen and (max-width: $breakpoint-mobile-max) {\n      width: 32px;\n      height: 32px;\n      right: -16px;\n      top: -16px;\n\n      svg {\n        width: 12px;\n        height: 12px;\n      }\n    }\n  }\n`\n\nexport interface ModalProps extends OverlayProps {\n  visible: boolean\n  width?: string\n  alignItems?: AlignItems\n  justifyContent?: Justify\n  onClose: () => void\n}\n\nexport const Modal: React.FunctionComponent<ModalProps & React.HTMLAttributes<HTMLDivElement>> = ({\n  children,\n  visible,\n  width = '50rem',\n  onClose,\n  zIndex = 5,\n  disableClick = false,\n  alignItems = 'flex-start',\n  justifyContent = 'flex-start',\n  blur,\n  className,\n  ...rest\n}) => {\n  if (!visible) return null\n\n  const inlineStyle = {\n    ...(zIndex && { zIndex: zIndex + 1 }),\n    ...(width && { width }),\n  }\n  return (\n    <React.Fragment>\n      <Overlay\n        visible={visible}\n        onClose={onClose}\n        disableClick={disableClick}\n        zIndex={zIndex}\n        blur={blur}\n      >\n        <StyledModal\n          className={`base-modal ${className ? ` ${className}` : ''}`}\n          style={inlineStyle}\n          $alignItems={alignItems}\n          $justifyContent={justifyContent}\n          {...rest}\n        >\n          <button\n            className={`base-close-button`}\n            data-testid=\"close-button\"\n            onClick={onClose}\n            role=\"button\"\n            aria-label=\"Close\"\n            title=\"Close\"\n            type=\"button\"\n          >\n            <TimesIcon />\n          </button>\n          {children}\n        </StyledModal>\n      </Overlay>\n    </React.Fragment>\n  )\n}\n"],"names":["TimesIcon","props","_jsx","IconWrapper","StyledOverlay","styled","div","$zIndex","$transparent","css","$blur","Overlay","transparent","zIndex","visible","disableClick","blur","onClose","className","ovRef","useRef","handleClick","e","inlineStyle","rest","StyledModal","Modal","children","alignItems","justifyContent","width","React"],"mappings":"8RAEO,MAAAA,EAAAC,GAAAC,EAAAC,EAAA,CACO,QAAA,cAAS,GAAAF,EAAkBA,SAAAA,EAAAA,OAAAA,CACrC,EAAA,iaAAQ,CAAA,CAAoa,CAAA,wGCahb,MAAAG,EAAAC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAA6BC,CAAAA,CAYf,QAAAC,CAAU,IAAAA;AAAA,IAAMA,CAAAA,CACzB,aAAAC,CAAe,IAAAA,GAAAC;AAAAA;AAAAA;AAAAA,IAEhBA,CAAAA,CAGC,MAAAC,CAAQ,IAAAA,GAAAD;AAAAA;AAAAA;AAAAA,EAONE,EAAA,CAAA,CAEF,YAAAC,EAAA,GACW,OAAAC,EAAA,EACL,QAAAC,EAAA,GACC,aAAAC,EAAA,GACK,KAAAC,EAAA,GACR,QAAAC,EACPA,UAAAA,KACAC,CAEF,IAAA,CACE,MAAAC,EAAAC,iBAAA,IAAA,EAEAC,EAAAC,GAAA,CACE,CAAAP,GAAAI,EAAA,SAAAG,EAAA,SAAAH,EAAA,SAAAF,GAA6EA,GAAS,EAGxF,GAAA,CAAAH,EAAc,OAAA,KAEd,MAAAS,EAAA,CAAoB,GAAAV,GAAA,CACJ,CAAA,mBAAAA,CAAuBA,CAAO,EAG9C,OAAAX,EAAAE,EAAA,CACgB,IAAAe,EACPA,UAAAA,gBAAAA,EAAAA,IAAAA,IAAAA,KACoD,cAAA,OAC7C,MAAAI,EACLA,aAAAA,EACOX,QAAAA,EACLC,MAAAA,EACFG,GAAAA,EACHQ,QAAAA,CACKH,CAAAA,CAGf,4sBClEA,MAAAI,EAAApB,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmDOqB,EAAA,CAAA,CAA2F,SAAAC,EAChGA,QAAAA,EACAb,MAAAA,EAAAA,QACQ,QAAAG,EACRA,OAAAA,EAAAA,EACS,aAAAF,EAAA,GACM,WAAAa,EAAA,aACF,eAAAC,EAAA,aACI,KAAAb,EACjBA,UAAAA,KACAE,CAEF,IAAA,CACE,GAAA,CAAAJ,EAAc,OAAA,KAEd,MAAAS,EAAA,CAAoB,GAAAV,GAAA,CACJ,OAAAA,EAAA,CAAmB,EAAE,GAAAiB,GAAA,CACtB,MAAAA,CAAEA,CAAM,EAEvB,OAAA5B,EAAA6B,EAAA,SAAA,CACiB,SAAA7B,EAAAS,EAAA,CACL,QAAAG,EACNA,QAAAA,EACAG,aAAAA,EACAF,OAAAA,EACAF,KAAAA,EACAG,SAAAA,EAAAA,EAAAA,CAEY,UAAA,cAAAE,EAAA,IAAAA,IAAA,KAC6C,MAAAK,EAChDA,YAAAA,EACMK,gBAAAA,EACIC,GAAAA,EACbL,SAAAA,CAAAA,EAAAA,SAAAA,CAEJ,UAAA,oBACc,cAAA,eACA,QAAAP,EACHA,KAAAA,SACJ,aAAA,QACM,MAAA,QACL,KAAA,SACD,SAAAf,EAAAF,EAAA,EAAA,CAEK,CAAA,EAAA2B,CAAA,CAEH,CAAA,CAAA,CAAA,CACG,CAAA,CAItB;;"}