{"version":3,"file":"Grid.stories.d2c2999c.js","sources":["../../src/components/Grid/Column.tsx","../../src/components/Grid/Grid.tsx","../../src/components/Grid/GridPage.tsx"],"sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { BREAKPOINTS, COLS } from '../../constants'\n// import { getClasses } from '../../helpers'\nimport { AlignItems, ColumnSize, Justify, Spacings } from '../../types'\n\nexport type ColumnProps = {\n  xs?: ColumnSize\n  sm?: ColumnSize\n  md?: ColumnSize\n  lg?: ColumnSize\n  xsOffset?: ColumnSize\n  smOffset?: ColumnSize\n  mdOffset?: ColumnSize\n  lgOffset?: ColumnSize\n  alignItems?: AlignItems\n  justifyContent?: Justify\n  flexGrow?: '1' | '0'\n  $spacing?: Spacings\n  $mobileSpacing?: Spacings\n}\n\nconst getSize = (noCols: number) => (noCols / COLS) * 100\n\nconst StyledColumn = styled.div<ColumnProps>`\n  display: flex;\n  flex-direction: column;\n  width: ${({ lg, $spacing }) => `calc(${getSize(Number(lg))}% - var(--spacing-${$spacing}))`};\n  justify-content: ${({ justifyContent }) => justifyContent};\n  align-items: ${({ alignItems }) => alignItems};\n  flex-grow: ${({ flexGrow }) => flexGrow};\n  ${({ lgOffset }) =>\n    lgOffset &&\n    css`\n      margin-left: ${100 / Number(lgOffset)}%;\n    `}\n  @media screen and (min-width: ${BREAKPOINTS.md.min}px) and (max-width: ${BREAKPOINTS.md.max}px) {\n    width: ${({ md, $spacing }) => `calc(${getSize(Number(md))}% - var(--spacing-${$spacing}))`};\n    ${({ mdOffset }) =>\n      mdOffset &&\n      css`\n        margin-left: ${100 / Number(mdOffset)}%;\n      `}\n  }\n  @media screen and (min-width: ${BREAKPOINTS.sm.min}px) and (max-width: ${BREAKPOINTS.sm.max}px) {\n    width: ${({ sm, $spacing }) => `calc(${getSize(Number(sm))}% - var(--spacing-${$spacing}))`};\n    ${({ smOffset }) =>\n      smOffset &&\n      css`\n        margin-left: ${100 / Number(smOffset)}%;\n      `}\n  }\n  @media screen and (min-width: ${BREAKPOINTS.xs.min}px) and (max-width: ${BREAKPOINTS.xs.max}px) {\n    width: ${({ xs, $mobileSpacing }) =>\n      `calc(${getSize(Number(xs))}% - var(--spacing-${$mobileSpacing}))`};\n    ${({ xsOffset }) =>\n      xsOffset &&\n      css`\n        margin-left: ${100 / Number(xsOffset)}%;\n      `}\n  }\n`\n\nexport const Column: React.FunctionComponent<\n  ColumnProps & React.HTMLAttributes<HTMLDivElement>\n> = ({\n  xs = '12',\n  sm = '12',\n  md = '12',\n  lg = '12',\n  xsOffset,\n  smOffset,\n  mdOffset,\n  lgOffset,\n  justifyContent = 'flex-start',\n  alignItems = 'stretch',\n  flexGrow = '1',\n  $spacing,\n  ...rest\n}) => {\n  return (\n    <StyledColumn\n      lg={lg}\n      md={md}\n      sm={sm}\n      xs={xs}\n      lgOffset={lgOffset}\n      mdOffset={mdOffset}\n      smOffset={smOffset}\n      xsOffset={xsOffset}\n      justifyContent={justifyContent}\n      alignItems={alignItems}\n      flexGrow={flexGrow}\n      $spacing={$spacing}\n      data-testid=\"grid-column\"\n      {...rest}\n    />\n  )\n}\n","// import './Grid.scss'\n\nimport React, { Children, cloneElement, PropsWithChildren } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { BREAKPOINTS } from '../../constants'\n// import { getClasses } from '../../helpers'\nimport { AlignItems, Direction, Justify, Spacings } from '../../types'\nimport { Column, ColumnProps } from './Column'\n\nexport type GridProps = {\n  spacing: Spacings\n  direction?: Direction\n  mobileDirection?: Direction\n  justifyContent?: Justify\n  alignItems?: AlignItems\n  //   width?: string\n  mobileSpacing?: Spacings\n}\n\ntype StyledProps = {\n  $spacing: Spacings\n  $direction?: Direction\n  $mobileDirection?: Direction\n  $justifyContent?: Justify\n  $alignItems?: AlignItems\n  //   width?: string\n  $mobileSpacing?: Spacings\n}\n\nconst StyledGrid = styled.div<StyledProps>`\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  gap: ${({ $spacing }) => `var(--spacing-${$spacing})`};\n  flex-direction: ${({ $direction }) => $direction};\n  align-items: ${({ $alignItems }) => $alignItems};\n  justify-content: ${({ $justifyContent }) => $justifyContent};\n  /* > div {\n    margin: ${({ $spacing }) => `0 calc(var(--spacing-${$spacing}) * -1)`};\n  } */\n  @media screen and (max-width: ${BREAKPOINTS.xs.max}px) {\n    flex-direction: ${({ $mobileDirection }) => $mobileDirection};\n  }\n  ${({ $mobileSpacing }) =>\n    $mobileSpacing &&\n    css`\n      @media screen and (max-width: ${BREAKPOINTS.xs.max}px) {\n        gap: ${$mobileSpacing};\n      }\n    `}\n`\n\nexport const Grid: React.FunctionComponent<GridProps & React.HTMLAttributes<HTMLDivElement>> = ({\n  spacing = 's',\n  direction = 'row',\n  mobileDirection = 'column',\n  justifyContent = 'space-between',\n  alignItems = 'stretch',\n  mobileSpacing,\n  children,\n  //   width = '100%',\n  //   className,\n  ...rest\n}) => {\n  return (\n    <StyledGrid\n      $spacing={spacing}\n      $direction={direction}\n      $justifyContent={justifyContent}\n      $alignItems={alignItems}\n      $mobileSpacing={mobileSpacing}\n      $mobileDirection={mobileDirection}\n      {...rest}\n    >\n      {Children.map(children, (child) => {\n        const item = child as React.ReactElement<PropsWithChildren<ColumnProps>>\n\n        if (item.type === Column) {\n          return cloneElement(item, { $spacing: spacing, $mobileSpacing: mobileSpacing ?? spacing })\n        } else {\n          return child\n        }\n      })}\n    </StyledGrid>\n  )\n}\n","// import { ColumnSize, Spacings } from 'src/types'\n\nimport { AlignItems, ColumnSize, Direction, Justify, Spacings } from '../../types'\nimport { Column } from './Column'\nimport { Grid } from './Grid'\n\nexport type GridPageProps = {\n  spacing: Spacings // Pick<GridProps, 'spacing'>\n  direction?: Direction // Pick<GridProps, 'spacing'>\n  mobileDirection?: Direction\n  justifyContent?: Justify\n  alignItems?: AlignItems\n  //   width?: string\n  mobileSpacing?: Spacings\n  lg: ColumnSize\n  md: ColumnSize\n  sm: ColumnSize\n  xs: ColumnSize\n  xsOffset?: ColumnSize\n  smOffset?: ColumnSize\n  mdOffset?: ColumnSize\n  lgOffset?: ColumnSize\n  flexGrow?: '1' | '0'\n}\nconst GridPage = ({\n  spacing,\n  mobileSpacing,\n  direction,\n  mobileDirection,\n  alignItems,\n  justifyContent,\n  lg,\n  md,\n  sm,\n  xs,\n  xsOffset,\n  smOffset,\n  mdOffset,\n  lgOffset,\n  flexGrow,\n}: GridPageProps) => {\n  const gridProps = {\n    spacing,\n    mobileSpacing,\n    direction,\n    mobileDirection,\n    alignItems,\n    justifyContent,\n  }\n\n  const colProps = { lg, md, sm, xs, xsOffset, smOffset, mdOffset, lgOffset, flexGrow }\n  return (\n    <Grid {...gridProps}>\n      <Column {...colProps}>\n        <img src=\"https://placehold.co/400x100?text=Column+1\" alt=\"placeholder 1\" />\n      </Column>\n      <Column {...colProps}>\n        <img src=\"https://placehold.co/400x100?text=Column+2\" alt=\"placeholder 2\" />\n      </Column>\n      <Column {...colProps}>\n        <img src=\"https://placehold.co/400x100?text=Column+3\" alt=\"placeholder 3\" />\n      </Column>\n    </Grid>\n  )\n}\n\nexport default GridPage\n"],"names":["getSize","noCols","COLS","StyledColumn","styled","div","lg","$spacing","justifyContent","alignItems","flexGrow","lgOffset","css","BREAKPOINTS","max","md","mdOffset","sm","smOffset","xs","$mobileSpacing","xsOffset","Column","_jsx","rest","StyledGrid","$direction","$alignItems","$justifyContent","$mobileDirection","Grid","spacing","direction","mobileDirection","mobileSpacing","children","item","child","cloneElement","GridPage","gridProps","colProps","_jsxs"],"mappings":"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"}